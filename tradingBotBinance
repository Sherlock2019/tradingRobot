import ccxt
import numpy as np
import pandas as pd
import time

def calculate_macd(data, short_window=12, long_window=26, signal_window=9):
    ewma_short = data['close'].ewm(span=short_window).mean()
    ewma_long = data['close'].ewm(span=long_window).mean()
    macd_line = ewma_short - ewma_long
    signal_line = macd_line.ewm(span=signal_window).mean()
    return macd_line, signal_line

# Replace these with your Binance API credentials
api_key = 'your_api_key'
api_secret = 'your_api_secret'

# Initialize the Binance API object
binance = ccxt.binance({
    'apiKey': api_key,
    'secret': api_secret,
})

symbol = 'XRP/BTC'
usd_symbol = 'BTC/USDT'
timeframe = '1m'
previous_trade = 'sell'
current_timeframe = 1

# Fetch the BTC price in USD
btc_price_usd = float(binance.fetch_ticker(usd_symbol)['last'])

# Initialize balance
xrp_usd_balance = 45
btc_usd_balance = 45

xrp_balance = xrp_usd_balance / btc_price_usd
btc_balance = btc_usd_balance / btc_price_usd

last_xrp_price = 0

while xrp_balance > 0 or btc_balance > 0:
    # Fetch historical data and calculate MACD
    ohlcv = binance.fetch_ohlcv(symbol, timeframe)
    data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    macd_line, signal_line = calculate_macd(data)

    current_xrp_price = data['close'].iloc[-1]

    # Check for a buy or sell signal
    if macd_line.iloc[-1] > signal_line.iloc[-1] and previous_trade == 'sell' and btc_balance > 0 and current_xrp_price > last_xrp_price:
        # Buy signal
        print("Buy signal")
        
        # Execute buy order
        side = 'buy'
        price = current_xrp_price
        amount = btc_balance / price

        order = binance.create_order(symbol, 'limit', side, amount, price)
        print(order)

        # Update balances
        xrp_balance += btc_balance / price
        btc_balance = 0
        previous_trade = 'buy'
        last_xrp_price = current_xrp_price

    elif macd_line.iloc[-1] < signal_line.iloc[-1] and previous_trade == 'buy' and xrp_balance > 0 and current_xrp_price < last_xrp_price:
        # Sell signal
        print("Sell signal")

        # Execute sell order
        side = 'sell'
        price = current_xrp_price
        amount = xrp_balance

        order = binance.create_order(symbol, 'limit', side, amount, price)
        print(order)

        # Update balances
        btc_balance += xrp_balance * price
        xrp_balance = 0
        previous_trade = 'sell'
        last_xrp_price = current_xrp_price

    time.sleep(current_timeframe * 60)
